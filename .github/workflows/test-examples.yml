name: Test OPA Examples

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'examples/**'
      - 'docs/**/*.rego'
      - '.github/workflows/test-examples.yml'
  pull_request:
    branches: [ main, develop ]
    paths:
      - 'examples/**'
      - 'docs/**/*.rego'
  workflow_dispatch:

jobs:
  test-examples:
    name: Test Examples (OPA ${{ matrix.opa-version }})
    runs-on: ubuntu-latest
    strategy:
      matrix:
        opa-version: ['0.68.0', '0.60.0', '0.55.0']
      fail-fast: false

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install OPA ${{ matrix.opa-version }}
        run: |
          curl -L -o opa https://openpolicyagent.org/downloads/v${{ matrix.opa-version }}/opa_linux_amd64_static
          chmod 755 ./opa
          sudo mv opa /usr/local/bin/
          opa version

      - name: Test all examples
        run: |
          EXIT_CODE=0
          for dir in examples/*/; do
            if [ -f "$dir/policy.rego" ]; then
              echo "::group::Testing $(basename $dir)"
              cd "$dir"
              if opa test . -v; then
                echo "‚úÖ $(basename $dir) - PASSED"
              else
                echo "‚ùå $(basename $dir) - FAILED"
                EXIT_CODE=1
              fi
              cd ../..
              echo "::endgroup::"
            fi
          done
          exit $EXIT_CODE

      - name: Validate policy syntax
        run: |
          find examples/ -name "*.rego" -exec opa check {} \;

      - name: Run OPA fmt check
        run: |
          find examples/ -name "*.rego" -exec opa fmt -d {} \;

  test-coverage:
    name: Coverage Report
    runs-on: ubuntu-latest
    needs: test-examples

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install OPA
        run: |
          curl -L -o opa https://openpolicyagent.org/downloads/latest/opa_linux_amd64_static
          chmod 755 ./opa
          sudo mv opa /usr/local/bin/

      - name: Generate coverage report
        run: |
          for dir in examples/*/; do
            if [ -f "$dir/policy.rego" ]; then
              echo "Coverage for $(basename $dir):"
              cd "$dir"
              opa test . --coverage --format=json > coverage.json || true
              if [ -f coverage.json ]; then
                cat coverage.json
              fi
              cd ../..
            fi
          done

  lint-examples:
    name: Lint Examples
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install OPA
        run: |
          curl -L -o opa https://openpolicyagent.org/downloads/latest/opa_linux_amd64_static
          chmod 755 ./opa
          sudo mv opa /usr/local/bin/

      - name: Check Rego v1 compliance
        run: |
          find examples/ -name "*.rego" | while read file; do
            echo "Checking $file"
            if ! grep -q "import rego.v1" "$file"; then
              echo "‚ö†Ô∏è  Missing 'import rego.v1' in $file"
            fi
          done

      - name: Check for deprecated syntax
        run: |
          # Ê£ÄÊü•ÊòØÂê¶‰ΩøÁî®‰∫ÜÊóßËØ≠Ê≥ï
          if grep -r ":-" examples/ --include="*.rego"; then
            echo "‚ö†Ô∏è  Found deprecated ':-' syntax, use 'if' instead"
            exit 1
          fi

  build-report:
    name: Build Test Report
    runs-on: ubuntu-latest
    needs: [test-examples, lint-examples]
    if: always()

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Generate summary
        run: |
          cat << EOF > $GITHUB_STEP_SUMMARY
          # üß™ OPA Examples Test Report
          
          ## Test Results
          
          | Example | Status |
          |---------|--------|
          EOF
          
          for dir in examples/*/; do
            name=$(basename "$dir")
            if [ -f "$dir/policy.rego" ]; then
              echo "| $name | ‚úÖ Ready |" >> $GITHUB_STEP_SUMMARY
            else
              echo "| $name | üöß In Progress |" >> $GITHUB_STEP_SUMMARY
            fi
          done
          
          cat << EOF >> $GITHUB_STEP_SUMMARY
          
          ## Compatibility Matrix
          
          Tested with OPA versions:
          - ‚úÖ v0.68.0 (Latest)
          - ‚úÖ v0.60.0
          - ‚úÖ v0.55.0 (Minimum)
          
          All tests use **Rego v1.0** syntax.
          EOF

      - name: Comment on PR
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: '‚úÖ All OPA examples tests passed! See workflow for details.'
            })

